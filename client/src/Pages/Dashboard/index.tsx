import  { useState } from 'react';
import { axiosPublic } from '../../ApiServices/Axios';

const PayNowComponent = () => {
  const [amount, setAmount] = useState(1000); // You can set the default amount or pass it dynamically

  const payNow = async () => {
    try {
      // Make the order creation request to the backend
      const response = await axiosPublic.post(
        "http://localhost:4000/api/v1/order", // Adjust the URL as per your API endpoint
        {
          amount: amount,
          currency: 'INR',
          receipt: 'receipt#1',
          productid: '6718b6c9c6c923c43f7e4a12',
          daily_income: 100,
          total_income: 100,
        },
        {
          withCredentials: true, // Ensure cookies are included if needed
        }
      );

      const order = response.data;
      console.log("Order:", order);

      // Open Razorpay Checkout
      const options = {
        key: 'rzp_test_Oz09n2OkZmcgNQ', // Replace with your Razorpay key
        amount: order.data.amount, // Amount should be in the smallest currency unit (paise)
        currency: 'INR',
        name: 'Snook Coder',
        description: 'Test Transaction',
        order_id: order.data.id, // Use the `order.id` generated by Razorpay in the backend
        callback_url: 'http://localhost:4000/api/v1/payment-success', // Success callback URL
        prefill: {
          name: 'Gaurav Kumar',
          email: 'gaurav.kumar@example.com',
          contact: '9999999999',
        },
        theme: {
          color: '#F37254',
        },
        modal: {
          ondismiss: async function () {
            console.log('Payment modal closed or payment failed');

            // Send the failure status to your backend using Axios
            try {
              const failureResponse = await axiosPublic.post(
                'http://localhost:4000/api/v1/payment-failure', // Failure callback URL
                {
                  orderId: order.data.id,
                  status: 'failed',
                },
                {
                  withCredentials: true, // Ensure cookies are included if needed
                }
              );

              console.log('Payment Failure:', failureResponse.data);
            } catch (failureError) {
              console.error('Failed to report payment failure:', failureError);
            }
          },
        },
      };

      const rzp = new window.Razorpay(options);
      rzp.open();
    } catch (error) {
      console.error('Payment Error:', error);
    }
  };

  return (
    <div>
      <h2>Make Payment</h2>
      <button onClick={payNow}>Pay Now</button>
    </div>
  );
};

export default PayNowComponent;
